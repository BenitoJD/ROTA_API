// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ROTA_API.Data;

#nullable disable

namespace ROTA_API.Data.Migrations
{
    [DbContext(typeof(RotaDbContext))]
    partial class RotaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ROTA_API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ROTA_API.Models.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApproverNotes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApproverUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LeaveEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LeaveStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaveRequestId");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("ROTA_API.Models.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaveTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("LeaveTypeName")
                        .IsUnique();

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("ROTA_API.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanApproveLeave")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditLeave")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditRota")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewLeave")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewRota")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CanApproveLeave = true,
                            CanEditLeave = true,
                            CanEditRota = true,
                            CanViewLeave = true,
                            CanViewRota = true,
                            Description = "Full access administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CanApproveLeave = false,
                            CanEditLeave = false,
                            CanEditRota = false,
                            CanViewLeave = true,
                            CanViewRota = true,
                            Description = "Standard employee view-only access",
                            RoleName = "Viewer"
                        });
                });

            modelBuilder.Entity("ROTA_API.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ShiftEndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ShiftStartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShiftTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShiftId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("ROTA_API.Models.ShiftType", b =>
                {
                    b.Property<int>("ShiftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnCall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ShiftTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("ROTA_API.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("TeamId");

                    b.HasIndex("TeamName")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ROTA_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ROTA_API.Models.Employee", b =>
                {
                    b.HasOne("ROTA_API.Models.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ROTA_API.Models.LeaveRequest", b =>
                {
                    b.HasOne("ROTA_API.Models.User", "ApproverUser")
                        .WithMany("ApprovedLeaveRequests")
                        .HasForeignKey("ApproverUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ROTA_API.Models.User", "CreatedByUser")
                        .WithMany("CreatedLeaveRequests")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ROTA_API.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROTA_API.Models.LeaveType", "LeaveType")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ROTA_API.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedLeaveRequests")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApproverUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ROTA_API.Models.Shift", b =>
                {
                    b.HasOne("ROTA_API.Models.User", "CreatedByUser")
                        .WithMany("CreatedShifts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ROTA_API.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROTA_API.Models.ShiftType", "ShiftType")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ROTA_API.Models.User", "UpdatedByUser")
                        .WithMany("UpdatedShifts")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Employee");

                    b.Navigation("ShiftType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ROTA_API.Models.User", b =>
                {
                    b.HasOne("ROTA_API.Models.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("ROTA_API.Models.User", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROTA_API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ROTA_API.Models.Employee", b =>
                {
                    b.Navigation("LeaveRequests");

                    b.Navigation("Shifts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ROTA_API.Models.LeaveType", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("ROTA_API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ROTA_API.Models.ShiftType", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("ROTA_API.Models.Team", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ROTA_API.Models.User", b =>
                {
                    b.Navigation("ApprovedLeaveRequests");

                    b.Navigation("CreatedLeaveRequests");

                    b.Navigation("CreatedShifts");

                    b.Navigation("UpdatedLeaveRequests");

                    b.Navigation("UpdatedShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
